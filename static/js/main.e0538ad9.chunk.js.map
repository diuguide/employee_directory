{"version":3,"sources":["components/Entry.js","components/Jumbotron.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Entry","props","className","data","map","entry","key","cell","alt","src","picture","large","name","first","last","gender","phone","dob","age","Jumbotron","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","filterMen","filterWomen","filterDobAsc","filterDobDsc","Home","state","originalData","filteredMen","filter","person","console","log","setState","filteredWomen","ageAsc","sort","a","b","parseInt","ageDsc","refreshBtn","window","location","reload","axios","then","res","results","this","React","Component","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0538ad9.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../styles/Entry.css\";\r\nfunction Entry(props) {\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                \r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <table className=\"shadow\">\r\n                            <tr>\r\n                                <th>Photo</th>\r\n                                <th>First</th>\r\n                                <th>Last</th>\r\n                                <th>Gender</th>\r\n                                <th>Phone Number</th>\r\n                            </tr>\r\n                            {props.data.map((entry) =>\r\n                                <tr key={entry.cell}>\r\n                                    <td><img alt=\"profile\" src={entry.picture.large} /></td>\r\n                                    <td>{entry.name.first}</td>\r\n                                    <td>{entry.name.last}</td>\r\n                                    <td>{entry.gender}</td>\r\n                                    <td>#{entry.phone}</td>\r\n                                    <td>{entry.dob.age}</td>\r\n                                </tr>\r\n                            )}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Entry;","import React from 'react';\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron bg-primary shadow\">\r\n            <h1>Employee Directory</h1>\r\n            <div className=\"row\">\r\n                <div className=\"col mb-4 ml-4\">\r\n                    <div className=\"dropdown\">\r\n\r\n                        <button className=\"btn btn-secondary dropdown-toggle shadow\" type=\"button\" id=\"dropdownMenu3\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            Filter By\r\n                            </button>\r\n\r\n                        <div className=\"dropdown-menu shadow\" aria-labelledby=\"dropdownMenu3\">\r\n                            <button className=\"dropdown-item\" type=\"button\" onClick={() => { props.filterMen() }}>Filter Men</button>\r\n                            <button className=\"dropdown-item\" type=\"button\" onClick={() => { props.filterWomen() }}>Filter Women</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dropdown\">\r\n                        <button className=\"btn btn-secondary dropdown-toggle shadow\" type=\"button\" id=\"dropdownMenu2\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            Sort By\r\n                            </button>\r\n                        <div className=\"dropdown-menu shadow\" aria-labelledby=\"dropdownMenu2\">\r\n                            <button className=\"dropdown-item\" type=\"button\" onClick={() => { props.filterDobAsc() }}>DOB Ascending</button>\r\n                            <button className=\"dropdown-item\" type=\"button\" onClick={() => { props.filterDobDsc() }}>DOB Descending</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron","import React from 'react';\r\nimport axios from 'axios';\r\nimport Entry from '../components/Entry'\r\nimport Jumbotron from '../components/Jumbotron'\r\nimport moment from 'moment';\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        data: [],\r\n        originalData: []\r\n    }\r\n    componentDidMount() {\r\n        axios('https://randomuser.me/api/?results=12',\r\n        )\r\n            .then((res) => {\r\n                console.log(\"Success Component Did Mount: \" + res.data.results) \r\n                this.setState({ data: res.data.results, originalData: res.data.results })\r\n            }\r\n            );\r\n    }\r\n    filterMen = () => {\r\n        const filteredMen = this.state.originalData.filter(person => person.gender === (\"male\"))\r\n        console.log(filteredMen)\r\n        this.setState({ data: filteredMen}) \r\n    }\r\n    filterWomen = () => {\r\n        const filteredWomen = this.state.originalData.filter(person => person.gender === (\"female\"))\r\n        // console.log(filteredWomen)\r\n        this.setState({ data: filteredWomen }) \r\n    }\r\n    filterDobAsc = () => {\r\n        const ageAsc = this.state.originalData.sort((a,b) => parseInt(a.dob.age)  - parseInt(b.dob.age))\r\n        this.setState({ data: ageAsc})\r\n    }\r\n    filterDobDsc = () => {\r\n        const ageDsc = this.state.originalData.sort((a,b) => parseInt(b.dob.age)  - parseInt(a.dob.age))\r\n        this.setState({ data: ageDsc})\r\n    }\r\n    refreshBtn = () => {\r\n        window.location.reload()\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Jumbotron   \r\n                 filterMen={this.filterMen}\r\n                 filterWomen={this.filterWomen}\r\n                 filterDobAsc={this.filterDobAsc}\r\n                 filterDobDsc={this.filterDobDsc}\r\n                 refreshBtn={this.refreshBtn} />\r\n                <Entry data={this.state.data}\r\n                  />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path='/' component={Home} />\n      </div>\n    </Router>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}